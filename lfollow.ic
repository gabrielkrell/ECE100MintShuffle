/** File: lfollow.ic
 Purpose: Main code.  Contains high-evel routines and main().
 Parameters: See config.ic
 Author: Gabriel Krell
 Initial commit date: 9/30
**/

void main() {
	// int adj = start_process(adj_motor());
	//int pauser = start_process(pauseListener());
	int tetris;
	if (PLAY_TETRIS) {
		tetris = start_process(playTetris(TETRIS_BPM,1));
	}
	light_on();
	shuffleShell();
	
	//kill(pauser);
	// kill(adj);
	kill(tetris);
	light_off();
}

void mintShuffle() {
	float num1;
	float num2;
	while (1) {
		while (!start_button()) {
			printf("%f\n",(float)knob()/40.);
			sleep(.3);
		}
		num1 = (float)knob()/40.;
		//     // beep();
		//     // sleep(1.);
		//     // while (!start_button()) {
		//     //  printf("follow time: %f\n",(float)knob()/40.);
		//     //  sleep(.3);
		//     // }
		//     // num2 = (float)knob()/40.;
		
		beep();
		sleep(1.5);
	
		forwardFor(2.5); // forward to halfway
		sleep(.5);
	
		// 1st puck in
	
		backwardFor(.75); //leave puck, back up to line
	
		hardRight(); // turn ~45 degrees
		sleep(.40);
		stop(); 
		sleep(.5);
	
		scaleSpeedBy(.5);
		followLineForL(2.3); // approach corner
		scaleSpeedBy(2.);
		sleep(.5);
	
		left();
		sleep(.05);
		stop();
	
		scaleSpeedBy(.5);
		forwardFor(.5);
		right();
		sleep(.25);
		forwardFor(2.);
	
		// second puck in
	
		scaleSpeedBy(2.);
		stop();
		
		backwardFor(.5);
		sleep(.5);
		
		
		// in progress:
		left();
		sleep(.25); // fix this so that it goes along the side
		forward();
		sleep(1.5);
		beep();
		motor(MOTOR_L,MOTOR_L_SPEED/2);
		sleep(.5);
		stop();
		
	}
}

void shuffleShell() {
	int ms = start_process(mintShuffle());
	while(!stop_button()) {
		// wait for early termination
	}
	kill(ms);
}


// follow on a particular side of the line
void followLineForR(float seconds) {
	int cached_mode = LINE_FOLLOW_SIDE;
	LINE_FOLLOW_SIDE = 1;
	followLineFor(seconds);
	LINE_FOLLOW_SIDE = cached_mode;
}
void followLineForL(float seconds) {
	int cached_mode = LINE_FOLLOW_SIDE;
	LINE_FOLLOW_SIDE = 0;
	followLineFor(seconds);
	LINE_FOLLOW_SIDE = cached_mode;
}

// run followLine for a length of time
void followLineFor(float seconds) {
	int pid = start_process(followLine());
	sleep(seconds);
	kill(pid);
	stop();
}

// follow a tape line on the ground
void followLine() {
	if (LINE_FOLLOW_SIDE) { // follow on the right side
		if (tapeR() && !tapeL()) {
			hardRight();
		}
		if (!tapeR() && !tapeL()) {
			left();
		}
		if (tapeR() && tapeL()) {
			hardRight();
		}
		if (!tapeR() && tapeL()) {
			forward();
		}
	} else { // follow on the left side
		while (1) {
			if (tapeR() && !tapeL()) {
				forward();
			}
			if (!tapeR() && !tapeL()) {
				right();
			}
			if (tapeR() && tapeL()) {
				hardLeft();
			}
			if (!tapeR() && tapeL()) {
				hardLeft();
			}
		}
	}
}

// "stub" utility functions:

int kill(int pid) { // enables laziness
	return kill_process(pid);
}
