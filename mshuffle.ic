/** File: lfollow.ic
 Purpose: Main code.  Contains high-evel routines and main().
 Parameters: See config.ic
 Author: Gabriel Krell
 Initial commit date: 9/30
**/

void main() {
	int tetris;
	if (PLAY_TETRIS) {
		tetris = start_process(playTetris(TETRIS_BPM,1));
	}
	light_on();
	shuffleShell();

	kill(tetris);
	light_off();
}

void mintShuffle() {
	float num1;
	float num2;
	while (1) {
		while (!start_button()) {
			printf("%f\n",(float)knob()/40.);
			sleep(.3);
		}
		num1 = (float)knob()/40.;
		//     // beep();
		//     // sleep(1.);
		//     // while (!start_button()) {
		//     //  printf("follow time: %f\n",(float)knob()/40.);
		//     //  sleep(.3);
		//     // }
		//     // num2 = (float)knob()/40.;
		
		beep();
		sleep(1.5);
	
		forwardFor(2.5); // forward to halfway
	
		// 1st puck in
		fastNext();
		backwardFor(.75); //leave puck, back up to line
		hardRightFor(.4); // turn ~45 degrees
	
		scaleSpeedBy(.5);
		followLineForL(2.3); // approach corner
		scaleSpeedBy(2.);
	
		leftFor(.05);

		fastNextN(2);
		scaleSpeedBy(.5);
		forwardFor(.5);
		rightFor(.25);
		forwardFor(2.);
		scaleSpeedBy(2.);
	
		// second puck in
	
		backwardFor(.5);
		
		// in progress:
		fastNextN(2);
		leftFor(.25);  // fix this so that it goes along the side
		forwardFor(1.5);
		beep();
		motor(MOTOR_L,MOTOR_L_SPEED/2);
		sleep(.5);
		stop();
		
	}
}

void shuffleShell() {
	int ms = start_process(mintShuffle());
	while(!stop_button()) {
		defer();
		// wait for early termination
	}
	kill(ms);
}


// follow on a particular side of the line
void followLineForR(float seconds) {
	int cached_mode = LINE_FOLLOW_SIDE;
	LINE_FOLLOW_SIDE = 1;
	followLineFor(seconds);
	LINE_FOLLOW_SIDE = cached_mode;
	deliberate();
}
void followLineForL(float seconds) {
	int cached_mode = LINE_FOLLOW_SIDE;
	LINE_FOLLOW_SIDE = 0;
	followLineFor(seconds);
	LINE_FOLLOW_SIDE = cached_mode;
	deliberate();
}

// run followLine for a length of time
void followLineFor(float seconds) {
	int pid = start_process(followLine());
	sleep(seconds);
	kill(pid);
	stop();
	deliberate();
}

// follow a tape line on the ground
void followLine() {
	if (LINE_FOLLOW_SIDE) { // follow on the right side
		while(1) {
			if (tapeR()) {
				hardRight();
			} else{
				if (tapeL()) {
					forward();
				} else {
					left();
				}
			}
		}
	} else { // follow on the left side
		while (1) {
			if (tapeL()) {
				hardLeft();
			} else {
				if (tapeR()) {
					forward();
				} else {
					right();
				}
			}
		}
	}
}

// "stub" utility functions:

int kill(int pid) { // enables laziness
	return kill_process(pid);
}
